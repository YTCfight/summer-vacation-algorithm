//输入一个整型数组，数组里面有正数也有负数。
//数组中一个或连续的多个整数组成一个子数组。求所有子数组和的最大值和起始坐标。
//思路：若sum大于0，那么arr[i]加上sum必然大于arr[i]；若sum小于0，那么arr[i]加上sum必然小于arr[i].
int MaxLittalArr(int *arr, int len, int *x, int *y)
{
	int i = 0;
	int sum = 0;
	int max = 0;
	for (i = 0; i < len; i++)
	{
		if (sum < 0)
		{
			sum = arr[i];
			*x = i;
		}
		else
		{
			sum += arr[i];
		}
		if (sum>max)
		{
			max = sum;
			*y = i;
		}
	}
	return max;
}
int main()
{
	int arr[] = { 1, -2, 3, 10, -4, 7, 2, -5 };
	int len = sizeof(arr) / sizeof(arr[0]);
	int x = -1;
	int y = -1;
	int ret = MaxLittalArr(arr, len,&x,&y);
	printf("max=%d x=%d y=%d\n", ret, x, y);
	system("pause"); 
	return 0;
}
